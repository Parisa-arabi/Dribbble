<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Designs</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .selected {
            background-color: #e0f7fa;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <h1 class="navbar-brand">Designs List</h1>

            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <button class="btn text-white" id="fetchUserData" onclick="fetchUserData()">Your
                            Dashboard</button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container">


        <h4 class="my-4">Designs that we have here :</h1>

            <div class="mb-4">
                <div class="row">
                    <div class="col-md-3">
                        <label for="category">Category:</label>
                        <select id="category" class="form-control">
                            <option value="">All</option>
                            <option value="ui">ui</option>
                            <option value="web">Web</option>
                            <option value="graphic">Graphics</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="designer">Designer:</label>
                        <input type="text" id="designer" class="form-control" placeholder="Designer Name">
                    </div>
                    <div class="col-md-3">
                        <label for="price">Max Price:</label>
                        <input type="number" id="maxPrice" class="form-control" placeholder="Max Price">
                    </div>
                    <div class="col-md-3">
                        <label for="releaseDate">Release Date:</label>
                        <input type="date" id="releaseDate" class="form-control">
                    </div>

                </div>
            </div>

            <div class="row" id="designsContainer">
                <% designs.forEach(design=> { %>
                    <div class="col-md-4 mb-4 design-card" data-id="<%= design._id %>">
                        <% if (design.images && design.images.length > 0) { %>
                            <img src="<%= design.images[0] %>" 
                                class="card-img-top card-image" 
                                alt="<%= design.title %>"
                                style="height: 200px; object-fit: cover;">
                        <% } else { %>
                            <img src="/images/placeholder-image.jpg" 
                                class="card-img-top card-image" 
                                alt="No image available"
                                style="height: 200px; object-fit: cover;">
                        <% } %>
                        <div class="card">
                            <div class="card-body">
                                
                                <h6 class="card-title title">Title: <%= design.title %>
                                </h6>
                                <p class="card-text description"><strong>Description:</strong>
                                    <%= design.description %>
                                </p>
                                <p class="card-text price"><strong>Price:</strong>
                                    <%= design.price %>
                                </p>
                                <p class="card-text category"><strong>Category:</strong>
                                    <%= design.category %>
                                </p>
                                <p class="card-text release-date"><strong>Release Date:</strong>
                                    <%= new Date(design.createdAt).toLocaleDateString() %>
                                </p>
                                <p class="card-text designer-email"><strong>Designer Email:</strong>
                                    <%= design.designerEmail %>
                                </p>
                                <button class="btn btn-primary" onclick="toggleSelect(this)">Select for
                                    Purchase</button>
                            </div>
                        </div>
                    </div>
                    <% }) %>
            </div>


            <h2 class="my-4">Selected Designs</h2>
            <div id="cartItems" class="mb-4"></div>
            <button class="btn btn-success mb-4" id="finalizePurchase" onclick="finalizePurchase()">Finalize
                Purchase</button>
    </div>

    <script>
        let cart = [];

        function filterDesigns() {
            const category = document.getElementById('category').value.toLowerCase().trim();
            const designerEmail = document.getElementById('designer').value.toLowerCase().trim();
            const maxPrice = parseFloat(document.getElementById('maxPrice').value);
            const releaseDateInput = document.getElementById('releaseDate').value;

            const releaseDate = releaseDateInput ? releaseDateInput : '';

            const designCards = document.querySelectorAll('.design-card');

            designCards.forEach(card => {
                const cardReleaseDate = card.querySelector('.release-date')
                    ? new Date(card.querySelector('.release-date').textContent.split(':')[1].trim()).toLocaleDateString('en-CA')
                    : '';

                const cardCategory = card.querySelector('.category') ? card.querySelector('.category').textContent.toLowerCase().trim() : '';
                const cardDesigner = card.querySelector('.designer-email') ? card.querySelector('.designer-email').textContent.toLowerCase().trim() : '';
                const cardPrice = card.querySelector('.price') ? parseFloat(card.querySelector('.price').textContent.replace('Price:', '').trim()) : 0;

                const matchesCategory = !category || cardCategory.includes(category);
                const matchesDesigner = !designerEmail || cardDesigner.includes(designerEmail);
                const matchesPrice = isNaN(maxPrice) || cardPrice <= maxPrice;
                const matchesReleaseDate = !releaseDate || cardReleaseDate >= releaseDate;

                if (matchesCategory && matchesDesigner && matchesPrice && matchesReleaseDate) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        document.getElementById('category').addEventListener('change', filterDesigns);
        document.getElementById('designer').addEventListener('input', filterDesigns);
        document.getElementById('maxPrice').addEventListener('input', filterDesigns);
        document.getElementById('releaseDate').addEventListener('input', filterDesigns);



        

        function toggleSelect(button) {
            const card = button.closest('.design-card');
            const designId = card.getAttribute('data-id'); 

            const cardIndex = cart.findIndex(item => item.DesignID === designId);

            if (cardIndex === -1) { 
                cart.push({
                    DesignID: designId, 
                    Title: card.querySelector('.card-title').innerText.split(': ')[1],
                    Description: card.querySelector('.card-text:nth-child(2)').innerText.split(': ')[1],
                    Price: card.querySelector('.card-text:nth-child(3)').innerText.split(': ')[1],
                    Category: card.querySelector('.card-text:nth-child(4)').innerText.split(': ')[1],
                    ReleaseDate: card.querySelector('.card-text:nth-child(5)').innerText.split(': ')[1],
                    DesignerEmail: card.querySelector('.card-text:nth-child(6)').innerText.split(': ')[1],
                });
                button.classList.add('selected');
                button.innerText = 'Remove from Cart';
            } else { 
                cart.splice(cardIndex, 1); 
                button.classList.remove('selected');
                button.innerText = 'Select for Purchase';
            }
            updateCart();
        }

        function updateCart() {
            const cartItemsContainer = document.getElementById('cartItems');
            cartItemsContainer.innerHTML = ''; 

            if (cart.length === 0) {
                cartItemsContainer.innerHTML = '<p>No designs selected.</p>';
                return;
            }


            cart.forEach(item => {
                const div = document.createElement('div');
                div.innerHTML = `
            <p><strong>Title:</strong> ${item.Title}</p>
            <p><strong>Description:</strong> ${item.Description}</p>
            <p><strong>Price:</strong> ${item.Price}</p>
            <p><strong>Category:</strong> ${item.Category}</p>
            <p><strong>Release Date:</strong> ${item.ReleaseDate}</p>
            <p><strong>Designer Email:</strong> ${item.DesignerEmail}</p>
            <hr>
        `;
                cartItemsContainer.appendChild(div);
            });
        }
        function finalizePurchase() {
            if (cart.length === 0) {
                alert('Please select designs to purchase.');
                return;
            } else {

                fetchUserBalance().then(userAccountBalance => {
                    if (userAccountBalance === null) {
                        alert('Account balance not found. Please login and try again.');
                        return;
                    }

                    let totalPrice = 0;

                    cart.forEach(item => {
                        const price = parseFloat(item.Price); 
                        if (!isNaN(price)) {
                            totalPrice += price; 
                        } else {
                            console.warn(`Invalid price for item: ${item.Title}, skipping this item`);
                        }
                    });

                    if (userAccountBalance >= totalPrice) {
                        const purchaseData = {
                            items: cart,
                        };

                        console.log(cart);

                        fetch('http://localhost:5000/buyer/purchase', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(cart),
                            credentials: 'include'
                        })
                            .then(response => {
                                if (response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error('Purchase failed.');
                                }
                            })
                            .then(data => {
                                alert('Purchase successful: ' + JSON.stringify(data));
                                cart = [];
                                updateCart();
                                const buttons = document.querySelectorAll('.design-card button');
                                buttons.forEach(button => {
                                    button.innerText = 'Select for Purchase';
                                    button.classList.remove('selected');
                                });
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert(error.message);
                            });
                    } else {
                        alert('Account balance is less than the sum of the selected items. Please increase your balance in your dashboard.');
                    }
                }).catch(error => {
                    console.error('Error fetching user balance:', error);
                    alert('An error occurred while fetching your balance. Please try again.');
                });

            }


        }

        async function fetchUserBalance() {
            try {
                const response = await fetch('http://localhost:5000/buyer/account-balance', {
                    method: 'GET',
                    credentials: 'include', 
                });

                if (response.ok) {
                    const data = await response.json();
                    return parseFloat(data.balance); 
                } else {
                    console.error('Failed to fetch account balance');
                    return null; 
                }
            } catch (error) {
                console.error('Error fetching balance:', error);
                return null;
            }
        }

        function fetchUserData() {
            window.location.href = '/buyer/dashboard';  


        }

    </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

</html>